#!/usr/bin/env python
import requests
from time import time as timer
from multiprocessing.pool import ThreadPool
import threading
import click
import math
# clamd is virus scanner api:
# import clamd

def Handler(start,end,url,filename):
	headers = {'Range': 'bytes=%d-%d' % (start, end)} 
  
	# request the specified part and get into variable     
	r = requests.get(url, headers=headers, stream=True)

	with open(filename, "r+b") as fp:
		fp.seek(start)
		var = fp.tell() 
		fp.write(r.content)

# use click to create easy CLI interface:
@click.command(help="Download a file with a specific name to your current directory.") 
@click.option('--c',default=1, help="No of Threads")
@click.option('--name',type=click.Path(),help="Name of the file with extension") 
@click.argument('url_of_file',type=click.Path()) 
@click.pass_context
def download_file(ctx,url_of_file,name,c): 
	number_of_threads = c
	begTime = timer()
	r = requests.head(url_of_file) 
	if name: 
		file_name = name 
	else: 
		file_name = url_of_file.split('/')[-1] 
	try: 
		file_size = int(r.headers['content-length'])
	except: 
		print "Invalid URL"
		return
	
	part = int(file_size) // number_of_threads
	# The integer split might not occur evenly, in which case the part size has to be increased to match the original file size
	if (file_size % number_of_threads != 0):
		part = part + 1
	part = math.ceil(part)
	fp = open(file_name, "wb") 
	fp.write(b'\0' * file_size) 
	fp.close()
	for i in range(number_of_threads): 
		start = part * i 
		end = start + part
		if (end == file_size - 1):
			end = file_size
		  # create a Thread with start and end locations 
		t = threading.Thread(target=Handler, 
			   kwargs={'start': start, 'end': end, 'url': url_of_file, 'filename': file_name}) 
		t.setDaemon(True) 
		t.start() 

	main_thread = threading.current_thread()
	for t in threading.enumerate(): 
		if t is main_thread:
			continue
		t.join()
	print ('%s downloaded' % file_name)
	#after download, check for virus:
	# virusScan(name)

	elapsed_time = timer() - begTime

	print("Elapsed Time: ")
	print(elapsed_time)

# def virusScan(filename):
# 	cd = clamd.ClamdUnixSocket()
# 	open(filename,'wb').write(clamd.EICAR)
# 	cd.scan('/tmp/EICAR')
# 	print("Virus scan finished.")

if __name__ == '__main__': 
	download_file(obj={})



